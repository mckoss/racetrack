{"version":3,"file":"racetrack.js","sourceRoot":"","sources":["../src/racetrack.ts"],"names":[],"mappings":"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","sourcesContent":["export { Racetrack, U_TRACK };\n\n// x, y coordinates\ntype Point = [number, number];\n\n// Definition of a specific track\ninterface Track {\n    dim: Point,\n    grid: number;\n    startLine: [Point, Point];\n    finishLine: [Point, Point];\n\n    trackWidth: number;\n    path: Point[];\n}\n\nconst U_TRACK:Track = {\n    dim: [400, 400],\n    grid: 20,\n    startLine: [[20, 10], [20, 110]],\n    finishLine: [[20, 290], [20, 390]],\n    trackWidth: 100,\n    path: [[20, 60], [340, 60], [340, 340], [20, 340]],\n}\n\n// UI for Playing Racetrack game\nclass Racetrack {\n    canvas: HTMLCanvasElement;\n    track: Track;\n    ctx: CanvasRenderingContext2D;\n    path: Path2D = new Path2D();\n\n    constructor(canvas: HTMLCanvasElement, track: Track) {\n        this.canvas = canvas;\n        this.track = track;\n        this.ctx = canvas.getContext('2d')!;\n\n        this.canvas.width = this.track.dim[0];\n        this.canvas.height = this.track.dim[1];\n\n        this.calculateTrackPath();\n\n        this.clearStage();\n        this.drawTrackPath();\n        this.drawStartFinish();\n        this.drawDots();\n    }\n\n    clearStage() {\n        this.ctx.fillStyle = \"darkgreen\";\n        this.ctx.fillRect(0, 0, this.track.dim[0], this.track.dim[1]);\n    }\n\n    calculateTrackPath() {\n        this.path.moveTo(this.track.path[0][0], this.track.path[0][1]);\n        for (let i = 1; i < this.track.path.length; i++) {\n            this.path.lineTo(this.track.path[i][0], this.track.path[i][1]);\n        }\n    }\n\n    drawTrackPath() {\n        this.ctx.lineWidth = this.track.trackWidth;\n        this.ctx.strokeStyle = 'lightgray';\n        this.ctx.lineCap = 'butt';\n        this.ctx.lineJoin = 'round';\n        this.ctx.stroke(this.path);\n    }\n\n    drawStartFinish() {\n        this.ctx.lineWidth = 5;\n        this.ctx.strokeStyle = '#00e000';\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.track.startLine[0][0], this.track.startLine[0][1]);\n        this.ctx.lineTo(this.track.startLine[1][0], this.track.startLine[1][1]);\n        this.ctx.stroke();\n\n        this.ctx.strokeStyle = 'red';\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.track.finishLine[0][0], this.track.finishLine[0][1]);\n        this.ctx.lineTo(this.track.finishLine[1][0], this.track.finishLine[1][1]);\n        this.ctx.stroke();\n    }\n\n    drawDots() {\n        for (let y = this.track.grid; y < this.track.dim[1]; y += this.track.grid) {\n            for (let x = this.track.grid; x < this.track.dim[0]; x += this.track.grid) {\n                const inPath = this.ctx.isPointInStroke(this.path, x, y);\n                this.dot(x, y, inPath ? 'white' : 'red');\n            }\n        }\n    }\n\n    dot(x: number, y: number, color: string) {\n        this.ctx.fillStyle = color;\n        this.ctx.beginPath();\n        this.ctx.ellipse(x, y, 4, 4, 0, 0, 2 * Math.PI);\n        this.ctx.fill();\n    }\n}\n"]}